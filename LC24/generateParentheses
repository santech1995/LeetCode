//Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

class Solution {
	public List<String> generateParentheses(int n){
		List<String> validAnswers = new ArrayList<>();
		char[] currentString = new char[2 * n];
		recurse(n, n, 0, currentString, validAnswers);
		return validAnswers;
	}
	private static void recurse(int forwardParensNeeded, int backwardsParensNeeded, int currentIndex, String currentString, List<String> 
validAnswers) {
		if(forwardParensNeeded == 0 && backwardParensNeeded == 0){
			validAnswers.add(new String(currentIndex));
			return;
		}
		if(forwardParensNeeded > 0){
			currentString[currentIndex] = '(';
			recurse(forwardParensNeeded - 1, backwardsParensNeeded, currentIndex + 1, currentString, validAnswers);
		}
		if(backwardsParensNeeded > 0){
			currentString[currentIndex] = ')';
			recurse(forwardParensNeeded, backwardsParensNeeded - 1, currentIndex + 1, currentString, validAnswers);
		}
	}
} 
